import sys

def nearest_neighbor(graph, start):
    n = len(graph)
    visited = [False] * n
    path = [start]
    visited[start] = True
    current_node = start

    while False in visited:
        min_cost = sys.maxsize
        next_node = None

        for neighbor in range(n):
            if not visited[neighbor] and graph[current_node][neighbor] < min_cost:
                min_cost = graph[current_node][neighbor]
                next_node = neighbor

        visited[next_node] = True
        path.append(next_node)
        current_node = next_node

    cost = 0
    for i in range(n):
        cost += graph[path[i]][path[(i + 1) % n]]

    return path, cost

if __name__ == "__main__":
    print("Enter the number of vertices:")
    n = int(input())

    graph = []
    for i in range(n):
        row = []
        for j in range(n):
            if i != j:
                print(f"Enter the cost from vertex {i} to vertex {j}:")
                cost = int(input())
                row.append(cost)
            else:
                row.append(0)
        graph.append(row)

    print("Enter the starting vertex:")
    start = int(input())

    path, cost = nearest_neighbor(graph, start)
    print("Shortest path:", path)
    print("Total cost:", cost)
