import random
import math

# Define the cities and their coordinates
cities = {
    'A': (0, 0),
    'B': (1, 3),
    'C': (2, 5),
    'D': (4, 2),
    'E': (6, 4),
    'F': (5, 0)
}

# Calculate Euclidean distance between two cities
def calculate_distance(city1, city2):
    x1, y1 = cities[city1]
    x2, y2 = cities[city2]
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

# Calculate total distance of a tour
def calculate_tour_distance(tour):
    total_distance = 0
    for i in range(len(tour) - 1):
        total_distance += calculate_distance(tour[i], tour[i + 1])
    total_distance += calculate_distance(tour[-1], tour[0])  # Return to starting city
    return total_distance

# Initialize a random tour
def generate_random_tour():
    tour = list(cities.keys())
    random.shuffle(tour)
    return tour

# Simulated Annealing algorithm
def simulated_annealing():
    current_tour = generate_random_tour()
    current_distance = calculate_tour_distance(current_tour)
    temperature = 100.0
    cooling_rate = 0.01

    while temperature > 1:
        new_tour = current_tour.copy()
        # Swap two random cities in the tour
        idx1, idx2 = random.sample(range(len(new_tour)), 2)
        new_tour[idx1], new_tour[idx2] = new_tour[idx2], new_tour[idx1]
        new_distance = calculate_tour_distance(new_tour)

        # Calculate acceptance probability based on temperature and difference in distances
        if new_distance < current_distance or random.random() < math.exp((current_distance - new_distance) / temperature):
            current_tour = new_tour
            current_distance = new_distance
        
        temperature *= 1 - cooling_rate  # Cool down

    return current_tour, current_distance

# Main function to run simulated annealing and print results
def main():
    best_tour, best_distance = simulated_annealing()
    print(f"Best tour found: {best_tour}")
    print(f"Total distance: {best_distance:.2f}")

if __name__ == "__main__":
    main()
------------------------------------------------------
output : 
Best tour found: ['E', 'F', 'D', 'A', 'B', 'C']
Total distance: 20.35

=== Code Execution Successful ===
