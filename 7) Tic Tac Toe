import os

def print_board(board):
    """
    Prints the Tic-Tac-Toe board.
    """
    os.system('clear')  # Clear the console on Unix-based systems
    print("Tic-Tac-Toe\n")
    for row in board:
        print(" ".join(row))

def get_move(board, player):
    """
    Get the next move from the player.
    """
    valid_move = False
    while not valid_move:
        move = input(f"Player {player}, enter your move (row, col): ")
        try:
            row, col = map(int, move.split(','))
            row -= 1
            col -= 1
            if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == ' ':
                board[row][col] = player
                valid_move = True
            else:
                print("Invalid move. Try again.")
        except ValueError:
            print("Invalid input. Try again.")
    return board

def check_winner(board, player):
    """
    Check if the player has won the game.
    """
    # Check rows
    for row in board:
        if row.count(player) == 3:
            return True

    # Check columns
    for col in range(3):
        if board[0][col] == player and board[1][col] == player and board[2][col] == player:
            return True

    # Check diagonals
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:
        return True
    if board[0][2] == player and board[1][1] == player and board[2][0] == player:
        return True

    return False

def play_game():
    """
    Main function to play the Tic-Tac-Toe game.
    """
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    current_player = 0

    while True:
        print_board(board)
        board = get_move(board, players[current_player])

        if check_winner(board, players[current_player]):
            print_board(board)
            print(f"Player {players[current_player]} wins!")
            break

        if ' ' not in sum(board, []):
            print_board(board)
            print("It's a tie!")
            break

        current_player = (current_player + 1) % 2

if __name__ == "__main__":
    play_game()

************************************************************

def print_board(board):
    print("-------------")
    for i in range(3):
        print("|", board[3*i], "|", board[3*i+1], "|", board[3*i+2], "|")
        print("-------------")

def is_winner(board, player):
    # Check rows, columns, and diagonals
    return (board[0] == board[1] == board[2] == player or
            board[3] == board[4] == board[5] == player or
            board[6] == board[7] == board[8] == player or
            board[0] == board[3] == board[6] == player or
            board[1] == board[4] == board[7] == player or
            board[2] == board[5] == board[8] == player or
            board[0] == board[4] == board[8] == player or
            board[2] == board[4] == board[6] == player)

def is_full(board):
    return all(cell != ' ' for cell in board)

def is_game_over(board):
    return is_winner(board, 'X') or is_winner(board, 'O') or is_full(board)

def get_empty_cells(board):
    return [i for i, cell in enumerate(board) if cell == ' ']

def minimax(board, depth, is_maximizing):
    if is_winner(board, 'X'):
        return -10 + depth
    if is_winner(board, 'O'):
        return 10 - depth
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for cell in get_empty_cells(board):
            board[cell] = 'O'
            score = minimax(board, depth + 1, False)
            board[cell] = ' '
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for cell in get_empty_cells(board):
            board[cell] = 'X'
            score = minimax(board, depth + 1, True)
            board[cell] = ' '
            best_score = min(score, best_score)
        return best_score

def get_best_move(board):
    best_score = -float('inf')
    best_move = None
    for cell in get_empty_cells(board):
        board[cell] = 'O'
        score = minimax(board, 0, False)
        board[cell] = ' '
        if score > best_score:
            best_score = score
            best_move = cell
    return best_move

def play():
    board = [' ']*9
    print("Welcome to Tic-Tac-Toe!")
    print("You are 'X' and the computer is 'O'.")
    print("Here's the board:")
    print_board(board)

    while not is_game_over(board):
        player_move = int(input("Enter your move (0-8): "))
        if board[player_move] == ' ':
            board[player_move] = 'X'
            print_board(board)

            if is_winner(board, 'X'):
                print("You win!")
                break

            if is_full(board):
                print("It's a draw!")
                break

            computer_move = get_best_move(board)
            board[computer_move] = 'O'
            print_board(board)

            if is_winner(board, 'O'):
                print("Computer wins!")
                break

            if is_full(board):
                print("It's a draw!")
                break
        else:
            print("That cell is already taken. Try again.")

if __name__ == "__main__":
    play()

