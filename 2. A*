from collections import deque

# Define the goal state
GOAL_STATE = (0, 1, 2, 3, 4, 5, 6, 7, 8)

def find_blank(state):
    """Find the index of the blank tile"""
    return state.index(0)

def swap(state, i, j):
    """Swap the tiles at indices i and j"""
    new_state = list(state)
    new_state[i], new_state[j] = new_state[j], new_state[i]
    return tuple(new_state)

def get_neighbors(state):
    """Get the possible neighbor states"""
    neighbors = []
    blank = find_blank(state)
    row, col = divmod(blank, 3)

    # Check left neighbor
    if col > 0:
        neighbors.append(swap(state, blank, blank - 1))

    # Check right neighbor
    if col < 2:
        neighbors.append(swap(state, blank, blank + 1))

    # Check up neighbor
    if row > 0:
        neighbors.append(swap(state, blank, blank - 3))

    # Check down neighbor
    if row < 2:
        neighbors.append(swap(state, blank, blank + 3))

    return neighbors

def manhattan_distance(state):
    """Calculate the Manhattan distance heuristic"""
    distance = 0
    for i, value in enumerate(state):
        if value != 0:
            row, col = divmod(i, 3)
            goal_row, goal_col = divmod(value - 1, 3)
            distance += abs(row - goal_row) + abs(col - goal_col)
    return distance

def solve_puzzle(initial_state):
    """Solve the 8-puzzle using the A* algorithm"""
    queue = deque([(manhattan_distance(initial_state), initial_state, 0, None)])
    visited = set()
    while queue:
        heuristic, state, moves, parent = queue.popleft()
        if state == GOAL_STATE:
            path = []
            current_state = state
            while parent is not None:
                path.append(current_state)
                current_state, moves, parent = parent
            path.reverse()
            print("Solution found in", moves, "moves:")
            for i, state in enumerate(path):
                print(f"Step {i + 1}:")
                for row in range(3):
                    print(" ".join(str(tile) for tile in state[row * 3:(row + 1) * 3]))
                print()
            return path, moves

        if state not in visited:
            visited.add(state)
            for neighbor in get_neighbors(state):
                new_moves = moves + 1
                priority = new_moves + manhattan_distance(neighbor)
                queue.append((priority, neighbor, new_moves, (state, moves, parent)))

    return None, 0

# Example usage
initial_state = (1, 2, 3, 4, 5, 6, 7, 0, 8)
path, moves = solve_puzzle(initial_state)

if not path:
    print("No solution found.")

---------------------------------------------------
Solution found in 0 moves:
Step 1:
1 2 3
4 0 6
7 5 8

Step 2:
1 2 3
4 6 0
7 5 8

Step 3:
1 2 0
4 6 3
7 5 8

Step 4:
1 0 2
4 6 3
7 5 8

Step 5:
0 1 2
4 6 3
7 5 8

Step 6:
4 1 2
0 6 3
7 5 8

Step 7:
4 1 2
6 0 3
7 5 8

Step 8:
4 1 2
6 3 0
7 5 8

Step 9:
4 1 0
6 3 2
7 5 8

Step 10:
4 0 1
6 3 2
7 5 8

Step 11:
4 3 1
6 0 2
7 5 8

Step 12:
4 3 1
6 5 2
7 0 8

Step 13:
4 3 1
6 5 2
0 7 8

Step 14:
4 3 1
0 5 2
6 7 8

Step 15:
0 3 1
4 5 2
6 7 8

Step 16:
3 0 1
4 5 2
6 7 8

Step 17:
3 1 0
4 5 2
6 7 8

Step 18:
3 1 2
4 5 0
6 7 8

Step 19:
3 1 2
4 0 5
6 7 8

Step 20:
3 1 2
0 4 5
6 7 8

Step 21:
0 1 2
3 4 5
6 7 8
=== Code Execution Successful ===
