from collections import deque

def get_user_input(prompt):
    """Helper function to get user input as a tuple of integers"""
    user_input = input(prompt)
    return tuple(map(int, user_input.split()))

def find_blank(state):
    """Find the index of the blank tile"""
    return state.index(0)

def swap(state, i, j):
    """Swap the tiles at indices i and j"""
    new_state = list(state)
    new_state[i], new_state[j] = new_state[j], new_state[i]
    return tuple(new_state)

def get_neighbors(state):
    """Get the possible neighbor states"""
    neighbors = []
    blank = find_blank(state)
    row, col = divmod(blank, 3)

    # Check left neighbor
    if col > 0:
        neighbors.append(swap(state, blank, blank - 1))

    # Check right neighbor
    if col < 2:
        neighbors.append(swap(state, blank, blank + 1))

    # Check up neighbor
    if row > 0:
        neighbors.append(swap(state, blank, blank - 3))

    # Check down neighbor
    if row < 2:
        neighbors.append(swap(state, blank, blank + 3))

    return neighbors

def manhattan_distance(state, goal_state):
    """Calculate the Manhattan distance heuristic"""
    distance = 0
    for i, value in enumerate(state):
        if value != 0:
            row, col = divmod(i, 3)
            goal_row, goal_col = divmod(goal_state.index(value), 3)
            distance += abs(row - goal_row) + abs(col - goal_col)
    return distance

def solve_puzzle(initial_state, goal_state):
    """Solve the 8-puzzle using the A* algorithm"""
    queue = deque([(manhattan_distance(initial_state, goal_state), initial_state, 0, None)])
    visited = set()
    while queue:
        heuristic, state, moves, parent = queue.popleft()
        if state == goal_state:
            path = []
            current_state = state
            while parent is not None:
                path.append(current_state)
                current_state, moves, parent = parent
            path.reverse()
            print("Solution found in", moves, "moves:")
            for i, state in enumerate(path):
                print(f"Step {i + 1}:")
                for row in range(3):
                    print(" ".join(str(tile) for tile in state[row * 3:(row + 1) * 3]))
                print()
            return path, moves

        if state not in visited:
            visited.add(state)
            for neighbor in get_neighbors(state):
                new_moves = moves + 1
                priority = new_moves + manhattan_distance(neighbor, goal_state)
                queue.append((priority, neighbor, new_moves, (state, moves, parent)))

    return None, 0

# Get input from the user
initial_state = get_user_input("Enter the initial state (e.g., 1 2 3 4 5 6 7 0 8): ")
goal_state = get_user_input("Enter the goal state (e.g., 0 1 2 3 4 5 6 7 8): ")

# Solve the puzzle
path, moves = solve_puzzle(initial_state, goal_state)

if not path:
    print("No solution found.")
