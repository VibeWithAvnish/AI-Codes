def towers_of_hanoi(n, source, destination, auxiliary):
    """
    Solves the Towers of Hanoi problem by moving n disks from the source peg
    to the destination peg, using the auxiliary peg as a temporary storage.

    Args:
        n (int): The number of disks.
        source (str): The name of the source peg.
        destination (str): The name of the destination peg.
        auxiliary (str): The name of the auxiliary peg.

    Returns:
        list: A list of tuples representing the moves required to solve the problem.
              Each tuple contains the disk number and the source and destination pegs.
    """
    moves = []
    pegs = {source: list(range(n, 0, -1)), destination: [], auxiliary: []}

    def move_disks(n, source, destination, auxiliary):
        """
        Recursive helper function to move disks from the source peg to the destination peg.
        """
        if n == 1:
            disk = pegs[source].pop()
            pegs[destination].append(disk)
            print_pegs(pegs)
            moves.append((disk, source, destination))
            return

        # Move n-1 disks from source to auxiliary, using destination as temporary
        move_disks(n - 1, source, auxiliary, destination)

        # Move the remaining disk from source to destination
        disk = pegs[source].pop()
        pegs[destination].append(disk)
        print_pegs(pegs)
        moves.append((disk, source, destination))

        # Move the n-1 disks from auxiliary to destination, using source as temporary
        move_disks(n - 1, auxiliary, destination, source)

    def print_pegs(pegs):
        """
        Prints the state of the pegs with disks represented by numbers.
        """
        a_peg = pegs['A']
        b_peg = pegs['B']
        c_peg = pegs['C']
        max_len = max(len(a_peg), len(b_peg), len(c_peg))

        for i in range(max_len, 0, -1):
            row = []
            if i <= len(a_peg):
                row.append(str(a_peg[len(a_peg) - i]))
            else:
                row.append(' ')

            if i <= len(b_peg):
                row.append(str(b_peg[len(b_peg) - i]))
            else:
                row.append(' ')

            if i <= len(c_peg):
                row.append(str(c_peg[len(c_peg) - i]))
            else:
                row.append(' ')

            print(' '.join(row))

        print('A B C')
        print()

    move_disks(n, source, destination, auxiliary)
    return moves

# Example usage
n = 3
source = 'A'
destination = 'C'
auxiliary = 'B'

towers_of_hanoi(n, source, destination, auxiliary)
----------------------------------------------------------------
3    
2   1
A B C

3 2 1
A B C

  2  
3 1  
A B C

  2  
  1 3
A B C

1 2 3
A B C

    3
1   2
A B C

    3
    2
    1
A B C
=== Code Execution Successful ===

OR

def TowerOfHanoi(n, from_rod, to_rod, aux_rod): 
    if n == 0: 
        return
    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) 
    print("Move disk", n, "from rod", from_rod, "to rod", to_rod) 
    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod) 
  
  
N = 3
  
TowerOfHanoi(N, 'A', 'C', 'B')
